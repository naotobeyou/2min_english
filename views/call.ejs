<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>音声通話</title>
</head>
<body>
  <h1>通話ルーム: <%= roomId %></h1>
  <p id="status">音声通話を準備中...</p>

  <div id="timer" style="font-size: 24px; margin-bottom: 10px; color: green;">02:00</div>

  <!-- 終了ボタン -->
  <button id="endCallBtn" disabled style="padding: 10px 20px; background-color: crimson; color: white; border: none; border-radius: 5px; font-size: 16px;">
    通話を終了する
  </button>

  <!-- 音声出力 -->
  <audio id="remoteAudio" autoplay></audio>

  <script src="/socket.io/socket.io.js"></script>

  <script>
    console.log("📲 JavaScript が実行されています");

    const socket = io();
    const roomId = "<%= roomId %>";
    const userId = "<%= user._id %>";

    socket.emit('join-waiting', userId);

    const peer = new RTCPeerConnection({
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' }
      ]
    });

    const endCallBtn = document.getElementById('endCallBtn');
    const timerDisplay = document.getElementById('timer');
    let remaining = 120;
    let timerInterval;

    // 終了ボタンのクリックイベント
    endCallBtn.addEventListener('click', () => {
      alert("通話を終了します");
      window.location.href = "/dashboard";
    });

    // タイマー開始
    const startTimer = () => {
      timerInterval = setInterval(() => {
        const min = String(Math.floor(remaining / 60)).padStart(2, '0');
        const sec = String(remaining % 60).padStart(2, '0');
        timerDisplay.textContent = `${min}:${sec}`;

        if (remaining <= 30) {
          timerDisplay.style.color = "red";
        }

        if (remaining <= 0) {
          clearInterval(timerInterval);
          alert("通話時間が終了しました");
          window.location.href = "/dashboard";
        }

        remaining--;
      }, 1000);
    };

    socket.on('matched', (roomId) => {
      console.log("🔁 matched イベント受信 → /call にリダイレクト");
      window.location.href = `/call/${roomId}`;
    });

    socket.on('connect', () => {
      console.log("✅ ソケット接続OK！", socket.id);
    });

    console.log("📡 ルームID: ", roomId);

    navigator.mediaDevices.getUserMedia({ audio: true })
      .then(stream => {
        stream.getTracks().forEach(track => peer.addTrack(track, stream));

        peer.ontrack = (event) => {
          console.log("🎧 相手の音声トラックが来た！");
          document.getElementById('remoteAudio').srcObject = event.streams[0];

          const statusEl = document.getElementById('status');
          if (statusEl) {
            statusEl.textContent = '✅ 通話が始まりました！';
            statusEl.style.color = 'green';
            statusEl.style.fontWeight = 'bold';
          }

          endCallBtn.disabled = false;
          startTimer();
        };

        socket.emit('join-room', roomId);

        socket.on('ready', async () => {
          console.log("🚀 相手が入室したので、offer を送信します");
          const offer = await peer.createOffer();
          await peer.setLocalDescription(offer);
          socket.emit('offer', roomId, offer);
        });

        socket.on('offer', async (offer) => {
          await peer.setRemoteDescription(offer);
          const answer = await peer.createAnswer();
          await peer.setLocalDescription(answer);
          socket.emit('answer', roomId, answer);
        });

        socket.on('answer', async (answer) => {
          await peer.setRemoteDescription(answer);
        });

        socket.on('ice-candidate', async (candidate) => {
          if (candidate) {
            await peer.addIceCandidate(candidate);
          }
        });

        peer.onicecandidate = (event) => {
          if (event.candidate) {
            socket.emit('ice-candidate', roomId, event.candidate);
          }
        };
      })
      .catch(err => {
        console.error("❌ マイク取得エラー:", err);
      });
  </script>
</body>
</html>
