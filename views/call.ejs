<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>音声通話</title>
</head>

<body>
  <h1>通話ルーム: <%= roomId %></h1>
  <p id="status">音声通話を準備中...</p>

  <!-- メモ入力欄（初期は非表示） -->
<div id="noteSection" style="display: none; margin-top: 20px;">
    <h3>通話の振り返りメモ</h3>
    <form id="noteForm" method="POST" action="/save-note">
      <textarea name="note" rows="5" cols="50" placeholder="気づきや改善点などを書いてね！"></textarea><br>
      <input type="hidden" name="roomId" value="<%= roomId %>">
      <input type="hidden" name="partnerId" value="<%= partner._id %>">
      <button type="submit">メモを保存する</button>
    </form>
    <button id="skipNoteBtn" style="margin-top: 10px;">メモを残さず終了</button>
  </div>


  <div id="timer" style="font-size: 24px; margin-bottom: 10px; color: green;">02:00</div>
  <p id="extensionInfo">延長可能回数: 2回</p>
  <p>延長は残り30秒で相手にリクエスト可能になります！</p>
  <button id="extendBtn" style="display: none;">延長する</button>
 
  <h2>相手のプロフィール</h2>

  <img src="/uploads/<%= partner.avatar || 'default.png' %>" alt="プロフィール画像" style="width: 120px; height: 120px; border-radius: 50%; border: 2px solid #ccc; margin-bottom: 10px;">
  
  <ul>
    <li><strong>名前:</strong> <%= partner.username %></li>
    <li><strong>趣味:</strong> <%= partner.hobbies || '未設定' %></li>
    <li><strong>目的:</strong> <%= partner.purpose || '未設定' %></li>
    <li><strong>英語レベル:</strong> <%= partner.level %></li>
  </ul>

  <div id="topicArea" style="display: none; margin-top: 20px;">
    <h3>💬 話題カード</h3>
    <p id="topicContent">話題がここに表示されます</p>
    <button id="changeTopicBtn">他の話題に変える</button>
  </div>
  <button id="showTopicBtn">話題を選ぶ</button>

  <!-- 終了ボタン -->
  <button id="endCallBtn" disabled style="padding: 10px 20px; background-color: crimson; color: white; border: none; border-radius: 5px; font-size: 16px;">
    通話を終了する
  </button>

  <!-- 音声出力 -->
  <audio id="remoteAudio" autoplay></audio>

  <script src="/socket.io/socket.io.js"></script>

  <script>

    
    const socket = io();
    const roomId = "<%= roomId %>";
    const userId = "<%= user._id %>";
  
    socket.emit('join-waiting', userId);
  
    const peer = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    });
  
    const endCallBtn = document.getElementById('endCallBtn');
    const timerDisplay = document.getElementById('timer');
    const noteSection = document.getElementById('noteSection');
    const statusEl = document.getElementById('status');
    const extendBtn = document.getElementById('extendBtn');

  
    let remaining = 120;
    let timerInterval;
    
  
  
    
    function endCall() {
      
      // 表示を非表示に
      if (statusEl) statusEl.style.display = 'none';
      if (endCallBtn) endCallBtn.style.display = 'none';
      if (timerDisplay) timerDisplay.style.display = 'none';
      if (noteSection) noteSection.style.display = 'block';
  
      clearInterval(timerInterval);
  
      // 音声送信停止
      if (peer && peer.getSenders) {
        peer.getSenders().forEach(sender => {
          if (sender.track) sender.track.stop();
        });
      }

      socket.emit('force-end', roomId);
    }

    


  
    endCallBtn.addEventListener('click', endCall);
  
    function startTimer() {
      timerInterval = setInterval(() => {
        const min = String(Math.floor(remaining / 60)).padStart(2, '0');
        const sec = String(remaining % 60).padStart(2, '0');
        timerDisplay.textContent = `${min}:${sec}`;
  
        if (remaining === 30 && extensionCount < 2) {
            timerDisplay.style.color = "red";
            extendBtn.style.display = 'inline-block';
            extendBtn.disabled = false;
            extendBtn.textContent = '延長する';
            }

  
        if (remaining <= 0) {
          clearInterval(timerInterval);
          if (statusEl) {
            statusEl.textContent = '📝 通話時間が終了しました。メモを残しましょう！';
            statusEl.style.color = 'black';
          }
          endCall(); // タイムアップ時にも共通処理を呼ぶ
        }
  
        remaining--;
      }, 1000);
    }
  
    socket.on('matched', (roomId) => {
      window.location.href = `/call/${roomId}`;
    });
  
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then(stream => {
        stream.getTracks().forEach(track => peer.addTrack(track, stream));
  
        peer.ontrack = (event) => {
          document.getElementById('remoteAudio').srcObject = event.streams[0];
          if (statusEl) {
            statusEl.textContent = '✅ 通話が始まりました！';
            statusEl.style.color = 'green';
            statusEl.style.fontWeight = 'bold';
          }

      
          endCallBtn.disabled = false;
          startTimer();
        };
  
        socket.emit('join-room', roomId);
  
        socket.on('ready', async () => {
          const offer = await peer.createOffer();
          await peer.setLocalDescription(offer);
          socket.emit('offer', roomId, offer);
        });
  
        socket.on('offer', async (offer) => {
          await peer.setRemoteDescription(offer);
          const answer = await peer.createAnswer();
          await peer.setLocalDescription(answer);
          socket.emit('answer', roomId, answer);
        });
  
        socket.on('answer', async (answer) => {
          await peer.setRemoteDescription(answer);
        });
  
        socket.on('ice-candidate', async (candidate) => {
          if (candidate) {
            await peer.addIceCandidate(candidate);
          }
        });

        socket.on('force-end', () => {
            console.log("📴 相手が通話を終了したため、自分も終了します");
            endCall(); // 自分側でも終了処理
        });
  
        peer.onicecandidate = (event) => {
          if (event.candidate) {
            socket.emit('ice-candidate', roomId, event.candidate);
          }
        };
      })
      .catch(err => {
        console.error("❌ マイク取得エラー:", err);
      });

      const showTopicBtn = document.getElementById('showTopicBtn');
      const changeTopicBtn = document.getElementById('changeTopicBtn');
      const topicArea = document.getElementById('topicArea');
      const topicContent = document.getElementById('topicContent');

      const topics = [
        "週末は何をして過ごすのが好き？",
        "最近見た映画で面白かったのは？",
        "英語を学ぶきっかけは？",
        "もしどこでも住めるなら、どこを選ぶ？",
        "子どものころの夢は？"
      ];

      function selectRandomTopic() {
        const topic = topics[Math.floor(Math.random() * topics.length)];
        socket.emit('topic-selected', { roomId, topic }); // ✅ オブジェクトで送信
      }

      // 話題を初めて選ぶ or 再選択
      showTopicBtn.addEventListener('click', selectRandomTopic);
      changeTopicBtn.addEventListener('click', selectRandomTopic);

      // 相手と話題を共有
      socket.on('topic-selected', (topic) => {
        topicContent.textContent = topic;
        topicArea.style.display = 'block';
        showTopicBtn.style.display = 'none'; // 話題選択後は非表示に
      });

   

        // 延長処理（60秒追加）
        let extensionCount = 0; // ← 追加（合計延長回数を管理）
        let isExtending = false;

        function extendCall() {
            if (isExtending || extensionCount >= 2) return;

            isExtending = true;
            console.log("🟩 extendCall() 実行！ 現在の extensionCount:", extensionCount);

            extensionCount++;
            remaining += 60;

            // extensionCount が 2 に達したときだけ非表示にする
            if (extensionCount >= 2) {
                extendBtn.style.display = 'none';
            } else {
                extendBtn.style.display = 'inline-block';
                extendBtn.disabled = true;
                extendBtn.textContent = '相手の同意を待っています...';
            }


            statusEl.textContent = '✅ 通話が1分延長されました';
            statusEl.style.color = 'green';

            updateExtensionInfo(); // 🔄 残り回数の表示を更新

            extensionRequested = false;
            extensionReceived = false;

            setTimeout(() => {
                isExtending = false;
            }, 100);
        }

      document.getElementById('skipNoteBtn').addEventListener('click', () => {
        if (confirm("メモを残さず終了しますか？")) {
            window.location.href = '/dashboard';
        }
        });

          //延長機能
        let extensionAgreed = false;
        let partnerAgreed = false;



        let extensionRequested = false;
        let extensionReceived = false;

        extendBtn.addEventListener('click', () => {
            if (extensionCount >= 2) return;

            // 🧹 ここで毎回初期化（大事！）
            extensionRequested = true;
            extensionReceived = false;

            extendBtn.disabled = true;
            extendBtn.textContent = '相手の同意を待っています...';

            socket.emit('request-extension', roomId);

        if (extensionReceived) {
            socket.emit('approve-extension', roomId); // 両方押したのでOK通知
            extendCall();
        }
        });

        // 相手から延長リクエストが届いた時
        socket.on('extension-requested', () => {
        extensionReceived = true;

        if (extensionRequested) {
            socket.emit('approve-extension', roomId);
        } else {
            if (extensionCount < 2) {
            extendBtn.style.display = 'inline-block';
            extendBtn.disabled = false;
            extendBtn.textContent = '通話相手が延長を希望しています';
            }
        }
        });

        let extensionApprovals = 0;

        socket.on('extension-approved', () => {
        if (extensionApprovals >= extensionCount + 1) return;

        console.log("📥 extension-approved 受信！ extensionApprovals:", extensionApprovals, "extensionCount:", extensionCount);
        
        extensionApprovals++;
        extendCall();
        });


         // 延長回数表示（最大2回まで）
        function updateExtensionInfo() {
        const remaining = 2 - extensionCount;
        document.getElementById('extensionInfo').textContent = `延長可能回数: ${remaining}回`;
        }

        // 初期表示
        updateExtensionInfo();



  </script>
  
</body>
</html>
