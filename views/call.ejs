<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>音声通話</title>
  <link rel="stylesheet" href="/css/style.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>

<div class="card call-card">

  <!-- プロフィール＋タイマー -->
  <div class="profile-timer-wrapper">
    <!-- プロフィール左側 -->
    <div class="profile-left">
      <img src="/uploads/<%= partner.avatar || 'default.png' %>" class="avatar-large" alt="プロフィール画像">
      <ul class="profile-list">
        <li><strong>名前:</strong> <%= partner.username %></li>
        <li><strong>趣味:</strong> <%= partner.hobbies || '未設定' %></li>
        <li><strong>目的:</strong> <%= partner.purpose || '未設定' %></li>
        <li><strong>英語レベル:</strong> <%= partner.level %></li>
      </ul>
    </div>

    <!-- タイマーとステータス右側 -->
    <div class="timer-right">
      <p id="status">音声通話を準備中...</p>
      <div id="timer" class="timer">02:00</div>
      <p id="extensionInfo" class="text-sm">延長可能回数: 2回</p>
      <button id="extendBtn" class="btn btn-secondary" style="display: none;">延長する</button>
    </div>
  </div>

  <!-- 話題カード -->
  <div class="topic-card">
    <select id="topicSelect" class="input">
      <option value="">-- 話題を選んでください --</option>
      <option value="週末は何をして過ごすのが好き？">週末は何をして過ごすのが好き？</option>
      <option value="最近見た映画で面白かったのは？">最近見た映画で面白かったのは？</option>
      <option value="英語を学ぶきっかけは？">英語を学ぶきっかけは？</option>
      <option value="もしどこでも住めるなら、どこを選ぶ？">もしどこでも住めるなら、どこを選ぶ？</option>
      <option value="子どものころの夢は？">子どものころの夢は？</option>
    </select>
    <button id="sendTopicBtn" class="btn btn-secondary">この話題にする</button>
    <p id="topicDisplay" class="text-lg bold"></p>
    <p id="topicNotice" class="text-sm gray"></p>
  </div>

  <!-- ボタン類 -->
  <div class="control-buttons">
    <button id="pauseBtn" class="btn btn-secondary">⏸️ 一時停止</button>
    <button id="resumeBtn" class="btn btn-secondary" style="display:none;">▶️ 再開</button>
    <button id="endCallBtn" class="btn btn-primary end-btn" disabled>通話を終了する</button>
  </div>

  <!-- 残り時間 -->
  <div class="pause-info">
    <div id="pause-status"><span id="pause-label"></span></div>
    <p id="myPauseTime">⏸️ あなたの残り: <span id="myPauseTimeLeft">2:00</span></p>
    <p id="partnerPauseTime">⏸️ 相手の残り: <span id="partnerPauseTimeLeft">2:00</span></p>
  </div>

</div>




<audio id="remoteAudio" autoplay></audio>
<script src="/socket.io/socket.io.js"></script>

  <script src="/js/call.js"></script>
  <script>
    const roomId = "<%= roomId %>";

    // ✅ 通話終了後、end画面に遷移
async function endCall() {


  if (window.__callEnded) return;
  window.__callEnded = true;
  console.log('▶️ 通話終了処理を開始');

  // 音声トラック停止
  if (peer?.getSenders) {
    try {
      peer.getSenders().forEach(sender => {
        sender.track?.stop();
      });
    } catch (e) {
      console.warn("音声トラック停止中に例外:", e);
    }
  }

  clearInterval(timerInterval);
  socket.emit('force-end', roomId);

  try {
    const response = await fetch('/mark-ended', {
      
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ roomId })
    });

    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    console.log(`✅ /mark-ended 成功：Room ${roomId} 終了マーク完了`);

    window.location.href = `/end/${roomId}`;
  } catch (err) {
    console.error('❌ /mark-ended 通信エラー:', err);
    alert('通話の終了処理に失敗しました。ダッシュボードに戻ります。');
    window.location.href = '/dashboard';
  }
}

        document.getElementById('endCallBtn').addEventListener('click', endCall);

        const socket = io();
    const userId = "<%= user._id %>";
    socket.emit('join-waiting', userId);

    const peer = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    });

    const endCallBtn = document.getElementById('endCallBtn');
    const statusEl = document.getElementById('status');
    const timerDisplay = document.getElementById('timer');
    const extendBtn = document.getElementById('extendBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const resumeBtn = document.getElementById('resumeBtn');
    const pauseHint = document.getElementById('pauseHint');
    const topicSelect = document.getElementById('topicSelect');
    const sendTopicBtn = document.getElementById('sendTopicBtn');
    const topicDisplay = document.getElementById('topicDisplay');
    const topicNotice = document.getElementById('topicNotice');
    const micSelect = document.getElementById('micSelect');
    const speakerSelect = document.getElementById('speakerSelect');
    const speakerVolumeSlider = document.getElementById('speakerVolume');
    const remoteAudio = document.getElementById('remoteAudio');

    let currentStream;
    let remaining = 120;
    let timerInterval;
    let extensionCount = 0;
    let extensionRequested = false;
    let extensionReceived = false;
    let extensionApprovals = 0;
    let timerPaused = false;
    let remainingPauseTime = 120;
    let pauseInterval;
    let topicLock = false;

    function startTimer() {
      timerInterval = setInterval(() => {
        if (timerPaused) return;

        const min = String(Math.floor(remaining / 60)).padStart(2, '0');
        const sec = String(remaining % 60).padStart(2, '0');
        timerDisplay.textContent = `${min}:${sec}`;

        if (remaining === 30 && extensionCount < 2) {
          timerDisplay.style.color = "red";
          extendBtn.style.display = 'inline-block';
          extendBtn.disabled = false;
          extendBtn.textContent = '延長する';
        }

        if (remaining <= 0) {
          clearInterval(timerInterval);
          statusEl.textContent = '📝 通話時間が終了しました';
          endCall();
        }

        remaining--;
      }, 1000);
    }

    function updateExtensionInfo() {
      const left = 2 - extensionCount;
      document.getElementById('extensionInfo').textContent = `延長可能回数: ${left}回`;
    }

    function extendCall() {
      extensionCount++;
      remaining += 60;
      updateExtensionInfo();
      extendBtn.disabled = true;
      extendBtn.textContent = '✅ 1分延長しました';
      statusEl.textContent = '✅ 通話が1分延長されました';
      statusEl.style.color = 'green';

      if (extensionCount >= 2) {
        extendBtn.style.display = 'none';
      }

      extensionRequested = false;
      extensionReceived = false;
    }

    extendBtn.addEventListener('click', () => {
      if (extensionCount >= 2) return;
      extensionRequested = true;
      extensionReceived = false;
      extendBtn.disabled = true;
      extendBtn.textContent = '相手の同意を待っています...';
      socket.emit('request-extension', roomId);
      if (extensionReceived) {
        socket.emit('approve-extension', roomId);
        extendCall();
      }
    });

    socket.on('extension-requested', () => {
      extensionReceived = true;
      if (extensionRequested) {
        socket.emit('approve-extension', roomId);
      } else {
        if (extensionCount < 2) {
          extendBtn.style.display = 'inline-block';
          extendBtn.disabled = false;
          extendBtn.textContent = '通話相手が延長を希望しています';
        }
      }
    });

    socket.on('extension-approved', () => {
      if (extensionApprovals >= extensionCount + 1) return;
      extensionApprovals++;
      extendCall();
    });

    // Pause/resume
    function updatePauseStatusDisplay(userName, isSelfPaused, isOtherPaused) {
      const label = document.getElementById('pause-label');
      const status = document.getElementById('pause-status');
      if (isSelfPaused) {
        label.textContent = '⏸️ 一時停止中です';
        status.style.display = 'block';
      } else if (isOtherPaused) {
        label.textContent = `⏸️ ${userName}さんが一時停止中です`;
        status.style.display = 'block';
      } else {
        status.style.display = 'none';
      }
    }

    function startPauseCountdown() {
      pauseInterval = setInterval(() => {
        if (remainingPauseTime > 0) {
          remainingPauseTime--;
          const m = Math.floor(remainingPauseTime / 60);
          const s = remainingPauseTime % 60;
          document.getElementById('myPauseTimeLeft').textContent = `${m}:${s.toString().padStart(2, '0')}`;
          socket.emit('pause-time-update', { roomId, remainingPauseTime });
        } else {
          clearInterval(pauseInterval);
          timerPaused = false;
          socket.emit('resume', roomId);
          updatePauseStatusDisplay(null, false, false);
          resumeBtn.style.display = 'none';
          pauseBtn.style.display = 'inline-block';
        }
      }, 1000);
    }

    pauseBtn.addEventListener('click', () => {
      if (remainingPauseTime <= 0) return;
      socket.emit('pause', { roomId, username: "<%= user.username %>" });
      timerPaused = true;
      updatePauseStatusDisplay(null, true, false);
      startPauseCountdown();
      pauseBtn.style.display = 'none';
      resumeBtn.style.display = 'inline-block';
    });

    resumeBtn.addEventListener('click', () => {
      socket.emit('resume', roomId);
      timerPaused = false;
      updatePauseStatusDisplay(null, false, false);
      clearInterval(pauseInterval);
      resumeBtn.style.display = 'none';
      pauseBtn.style.display = 'inline-block';
    });

    socket.on('partner-paused', (name) => {
      timerPaused = true;
      updatePauseStatusDisplay(name, false, true);
      pauseBtn.disabled = true;
      resumeBtn.disabled = true;
    });

    socket.on('partner-resumed', () => {
      timerPaused = false;
      updatePauseStatusDisplay(null, false, false);
      pauseBtn.disabled = false;
    });

    socket.on('pause-time-update', ({ remainingPauseTime }) => {
      const m = Math.floor(remainingPauseTime / 60);
      const s = remainingPauseTime % 60;
      document.getElementById('partnerPauseTimeLeft').textContent = `${m}:${s.toString().padStart(2, '0')}`;
    });

    // Topic Card
    sendTopicBtn.addEventListener('click', () => {
      const selected = topicSelect.value;
      if (!selected || topicLock) return;
      socket.emit('topic-selected', { roomId, topic: selected });
      topicDisplay.textContent = `💬 話題: ${selected}`;
      topicNotice.textContent = `トピックの再選択は30秒後に可能です`;
      lockTopicSelection();
    });

    socket.on('topic-selected', (topic) => {
      topicDisplay.textContent = `💬 話題: ${topic}`;
      if (!topicLock) {
        topicNotice.innerHTML = '通話相手が以下のトピックを選びました！<br>再選択は30秒後に可能です';
        lockTopicSelection();
      }
    });

    function lockTopicSelection() {
      topicLock = true;
      sendTopicBtn.disabled = true;
      topicSelect.disabled = true;
      setTimeout(() => {
        topicLock = false;
        sendTopicBtn.disabled = false;
        topicSelect.disabled = false;
        topicNotice.textContent = '';
      }, 30000);
    }

    // WebRTC
    navigator.mediaDevices.getUserMedia({ audio: true })
      .then(stream => {
        stream.getTracks().forEach(track => peer.addTrack(track, stream));
        peer.ontrack = (event) => {
          setTimeout(() => {
            if (!remoteAudio.srcObject || remoteAudio.srcObject.getAudioTracks().length === 0) {
              alert("相手の接続が確認できませんでした。ダッシュボードに戻ります。");
              window.location.href = "/dashboard";
            }
          }, 15000);


          remoteAudio.srcObject = event.streams[0];
          statusEl.textContent = '✅ 通話が始まりました！';
          statusEl.style.color = 'green';
          endCallBtn.disabled = false;
          startTimer();
        };
        socket.emit('join-room', roomId);
        socket.on('ready', async () => {
          const offer = await peer.createOffer();
          await peer.setLocalDescription(offer);
          socket.emit('offer', roomId, offer);
        });
        socket.on('offer', async (offer) => {
          await peer.setRemoteDescription(offer);
          const answer = await peer.createAnswer();
          await peer.setLocalDescription(answer);
          socket.emit('answer', roomId, answer);
        });
        socket.on('answer', async (answer) => {
          await peer.setRemoteDescription(answer);
        });
        socket.on('ice-candidate', async (candidate) => {
          if (candidate) await peer.addIceCandidate(candidate);
        });
        peer.onicecandidate = (event) => {
          if (event.candidate) socket.emit('ice-candidate', roomId, event.candidate);
        };
        socket.on('force-end', () => {
          endCall();
        });
      })
      .catch(err => {
        console.error("マイク取得失敗:", err);
      });

    // デバイス切り替え
    async function initDeviceSelectors() {
      try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        const audioInputs = devices.filter(d => d.kind === 'audioinput');
        const audioOutputs = devices.filter(d => d.kind === 'audiooutput');

        micSelect.innerHTML = '';
        speakerSelect.innerHTML = '';

        audioInputs.forEach(d => {
          const opt = document.createElement('option');
          opt.value = d.deviceId;
          opt.textContent = d.label || `マイク (${d.deviceId})`;
          micSelect.appendChild(opt);
        });

        audioOutputs.forEach(d => {
          const opt = document.createElement('option');
          opt.value = d.deviceId;
          opt.textContent = d.label || `スピーカー (${d.deviceId})`;
          speakerSelect.appendChild(opt);
        });

        const savedMic = localStorage.getItem('preferredMic');
        const savedSpeaker = localStorage.getItem('preferredSpeaker');
        if (savedMic) {
          micSelect.value = savedMic;
          await switchMic(savedMic);
        }
        if (savedSpeaker) {
          speakerSelect.value = savedSpeaker;
          await switchSpeaker(savedSpeaker);
        }
      } catch (e) {
        console.error("デバイス取得失敗:", e);
      }
    }

    async function switchMic(deviceId) {
      try {
        const newStream = await navigator.mediaDevices.getUserMedia({
          audio: { deviceId: { exact: deviceId } }
        });
        const newTrack = newStream.getAudioTracks()[0];
        const sender = peer.getSenders().find(s => s.track.kind === 'audio');
        if (sender) sender.replaceTrack(newTrack);
        if (currentStream) currentStream.getTracks().forEach(t => t.stop());
        currentStream = newStream;
      } catch (e) {
        console.error("マイク切替失敗:", e);
      }
    }

    async function switchSpeaker(deviceId) {
      if (typeof remoteAudio.setSinkId === 'function') {
        try {
          await remoteAudio.setSinkId(deviceId);
        } catch (e) {
          console.error("スピーカー切替失敗:", e);
        }
      } else {
        console.warn("setSinkId 非対応ブラウザ");
      }
    }

    micSelect.addEventListener('change', () => {
      const selected = micSelect.value;
      localStorage.setItem('preferredMic', selected);
      switchMic(selected);
    });

    speakerSelect.addEventListener('change', () => {
      const selected = speakerSelect.value;
      localStorage.setItem('preferredSpeaker', selected);
      switchSpeaker(selected);
    });

    speakerVolumeSlider.addEventListener('input', () => {
      remoteAudio.volume = parseFloat(speakerVolumeSlider.value);
    });

    initDeviceSelectors();

    socket.on('matching-error', (data) => {
      alert(data.message || '予期せぬエラーが発生しました');
      console.error('📛 サーバーエラー詳細:', data.detail);
    });

      // ✅ ページ離脱時にも /mark-ended を送信（通話が終了済みでない場合）
  window.addEventListener('beforeunload', async (e) => {
    if (!window.__callEnded) {
      try {
        await fetch('/mark-ended', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ roomId })
        });
        console.log('📤 beforeunload: /mark-ended 成功');
      } catch (err) {
        console.warn('⚠️ beforeunload: /mark-ended エラー:', err);
      }
    }
  });

  </script>
</body>
</html>
