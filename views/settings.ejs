<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>設定 | 2min English</title>
  <link rel="stylesheet" href="/css/style.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>

  <div class="card" style="max-width: 500px; margin: 4rem auto;">
    <h2 class="text-center">⚙️ 設定</h2>
    <p class="text-center text-sm" style="margin-bottom: 1rem;">ようこそ、<strong><%= user.username %></strong> さん</p>

    <h3>🎧 音声デバイス設定</h3>

    <label for="micSelect">🎤 マイク:</label>
    <select id="micSelect" class="input" style="margin-bottom: 1rem;"></select>

    <label for="speakerSelect">🔊 スピーカー:</label>
    <select id="speakerSelect" class="input" style="margin-bottom: 1rem;"></select>

    <p id="deviceInfo" class="text-sm" style="color: gray; margin-top: 0.5rem;"></p>

    <a href="/dashboard" class="btn btn-secondary" style="margin-top: 1.5rem;">← ダッシュボードへ戻る</a>
  </div>

  <script>
    const micSelect = document.getElementById('micSelect');
    const speakerSelect = document.getElementById('speakerSelect');
    const deviceInfo = document.getElementById('deviceInfo');

    async function loadAudioDevices() {
      try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        const audioInputs = devices.filter(d => d.kind === 'audioinput');
        const audioOutputs = devices.filter(d => d.kind === 'audiooutput');

        micSelect.innerHTML = '';
        speakerSelect.innerHTML = '';

        audioInputs.forEach(device => {
          const option = document.createElement('option');
          option.value = device.deviceId;
          option.textContent = device.label || `マイク (${device.deviceId})`;
          micSelect.appendChild(option);
        });

        audioOutputs.forEach(device => {
          const option = document.createElement('option');
          option.value = device.deviceId;
          option.textContent = device.label || `スピーカー (${device.deviceId})`;
          speakerSelect.appendChild(option);
        });

        const savedMic = localStorage.getItem('preferredMic');
        const savedSpeaker = localStorage.getItem('preferredSpeaker');

        if (savedMic && micSelect.querySelector(`[value="${savedMic}"]`)) {
          micSelect.value = savedMic;
        }

        if (savedSpeaker && speakerSelect.querySelector(`[value="${savedSpeaker}"]`)) {
          speakerSelect.value = savedSpeaker;
        }

        deviceInfo.textContent = 'この設定はこのブラウザに保存されます。';
      } catch (err) {
        console.error('🎤 デバイス取得エラー:', err);
        deviceInfo.textContent = 'デバイス情報の取得に失敗しました';
      }
    }

    micSelect.addEventListener('change', () => {
      localStorage.setItem('preferredMic', micSelect.value);
    });

    speakerSelect.addEventListener('change', () => {
      localStorage.setItem('preferredSpeaker', speakerSelect.value);
    });

    loadAudioDevices();
  </script>
</body>
</html>
